package main

import (
	"context"
	"fmt"
	"log"

	"example.com/12_call_contract/store"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/ethclient"
)

const (
    contractAddr = "0x0Ba442FFa124333c9F82f680A3230e46CbeB1DAA"
)

func main() {
	client, err := ethclient.Dial("https://eth-sepolia.g.alchemy.com/v2/5PoteT7uHuIrP414jmfKWNcvDwwXrpmA")
    if err != nil {
        log.Fatal(err)
    }
    storeContract, err := store.NewStore(common.HexToAddress(contractAddr), client)
    if err != nil {
        log.Fatal(err)
    }

    
    // privateKey, err := crypto.HexToECDSA("privateKey")
    // if err != nil {
    //     log.Fatal(err)
    // }
    

    var key [32]byte
    var value [32]byte
    copy(key[:], []byte("demo_save_key"))
    copy(value[:], []byte("demo_save_value11111"))


    
    // opt, err := bind.NewKeyedTransactorWithChainID(privateKey, big.NewInt(11155111))
    // if err != nil {
    //     log.Fatal(err)
    // }
    // tx, err := storeContract.SetItem(opt, key, value)
    // if err != nil {
    //     log.Fatal(err)
    // }
    // fmt.Println("tx hash:", tx.Hash().Hex())
    

    callOpt := &bind.CallOpts{Context: context.Background()}
    valueInContract, err := storeContract.Items(callOpt, key)
    if err != nil {
        log.Fatal(err)
    }
    fmt.Println("is value saving in contract equals to origin value:", valueInContract == value)
}